plan for v3:

- DONE: create locks and threads as we did in version 2, except we don't need to threadLocks or counter locks
- DONE: instead we need a new grid of locks and init them at beginning
- DONE: we need a global variable for that lock grid std::vector<std::vector<lock>>
- DONE write thread threadFunc
- figure out sleeping
- DONE properly terminate

threadFunc()
{
    while(stillGoing)
    {
        sleepMaybe();
        
        Cell cell = pickRandomCellToUpdate();

        aquireLocksForNeighbors(cell); // lock all 

        updateCell();

        unlockAllNeighborCells();
    }
}